#!/usr/bin/env bash
###########################################################
#  Author     : zhanghao                                  #
###########################################################


#################### Functions ##################################################

CreateConfigFile()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/CreateConfigFile.sh
}


CheckConfigFile()
{
  if  [[ ! -f $1 ]];then
    echo -e "Cannot find the ConfigFile:$ConfigFile !\n"
    exit 1
  else
    echo -e ">>> Find the ConfigFile: $ConfigFile\n"
  fi
}


CreateSampleInfoFile()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $shell_folder/CreateSampleInfoFile.sh
}


PrepareWorkDir()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh prepare
  source $shell_folder/PrepareWorkDir.sh
}


preAlignmentQC()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/preAlignmentQC.sh
}


Alignment()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/Alignment.sh
}


postAlignmentQC()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/postAlignmentQC.sh $shell_folder/dupRadar.R
}


Quantification()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/Quantification.sh $shell_folder/Quantification_featurecounts.R $shell_folder/Quantification_annotation.R
}

postQuantificationQC()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/postQuantificationQC.sh $shell_folder/postQuantificationQC.R
}

DifferentialExpression()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/DifferentialExpression.sh $shell_folder/DifferentialExpression.R
}

help()
{
cat << EOF
  Desc: A flexible, modularization, automation, and pragmatic workflow to efficiently process the NGS data in batches.
  
  Author: ZhangHao

  Usage: 
  
    NGSmodule <MODE> [-c <Config_file>]
  
  MODE options:
    
    CreateConfigFile     
    
    CreateSampleInfoFile     
    
    PrepareWorkDir           
    
    preAlignmentQC           
    
    Alignment                
    
    postAlignmentQC          
    
    Quantification
    
    postQuantificationQC   
    
    DifferentialExpression   
    
  Other options:
  
    -c, --ConfigFile          Specify the path of ConfigFile. A templet config file 
                              will be created with <CreateConfigFile> MODE.

    -h, --help                Show this message.
    
    -v, --version             Show the version of NGSmodule.

EOF
}


version_info()
{
cat <<- EOF
################################
    NGSmodule vsersion: 0.0.1   
################################
EOF
}


#################### Parsing the parameters ##################################################
echo  ""
getopt -T &>/dev/null;[ $? -ne 4 ] && { echo "not enhanced version\n";exit 1; }

parameters=`getopt --options c:hv --longoptions ConfigFile,help,version -n "$0" -- "$@"`
[ $? -ne 0 ] && { echo -e "Try '$0 --help' for more information.\n"; exit 1; }

eval set -- "$parameters" 
while true;do 
  case $1 in
    -c|--ConfigFile) ConfigFile=$2; shift 2;; 
    -h|--help) help; exit 0;; 
    -v|--version) version_info; exit 0;;
    --)
      shift
      if [[ $# == 0 ]];then
        echo -e "Please select a MODE option. Try '$0 --help' for more information.\n"
        exit 1
      elif [[ $1 == "CreateConfigFile" ]];then
        if [[ $ConfigFile != "" ]];then
          CreateConfigFile $ConfigFile
        else
          maindir=(`pwd`)
          tmp=(`date +"%Y%m%d%H%M%S"`)
          ConfigFile=temp_${tmp}.config
          CreateConfigFile $ConfigFile
        fi
        exit 0
      elif [[ $1 == "CreateSampleInfoFile" ]];then
        CreateSampleInfoFile
        exit 0
      elif [[ $1 == "PrepareWorkDir" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in PrepareWorkDir MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        PrepareWorkDir $ConfigFile
        exit 0      
      elif [[ $1 == "preAlignmentQC" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in preAlignmentQC MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        preAlignmentQC $ConfigFile
        exit 0   
      elif [[ $1 == "Alignment" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in Alignment MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        Alignment $ConfigFile
        exit 0   
      elif [[ $1 == "postAlignmentQC" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in postAlignmentQC MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        postAlignmentQC $ConfigFile
        exit 0   
      elif [[ $1 == "Quantification" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in Quantification MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        Quantification $ConfigFile
        exit 0   
      elif [[ $1 == "postQuantificationQC" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in Quantification MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        postQuantificationQC $ConfigFile
        exit 0   
      elif [[ $1 == "DifferentialExpression" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in Quantification MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        DifferentialExpression $ConfigFile
        exit 0   
      else
        echo -e "Invalid MODE: $1 \nTry '$0 --help' for more information.\n"
      fi
      break ;;
    -*) echo "error: no such option $1.\n"; exit 1;;
    *) echo "error: no such option $1.\n"; exit 1;;
  esac
done
