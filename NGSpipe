#!/usr/bin/env bash
###########################################################
#  Author     : zhanghao                                  #
###########################################################


#################### Functions ##################################################

CreateConfigFile()
{

cat << EOF >$1
#!/usr/bin/env bash
############# Rscript path ################################################################################
Rscript="/usr/local/bin/Rscript"

############# Global Paramaters ################################################################################
maindir="$(pwd)"  ## Absolute path.
rawdata_dir="$(pwd)/rawdata/" ## ## Absolute path of dir containing the raw fastq.gz data.
total_threads=380                             ## Total threads for use.
ntask_per_run="ALL"                           ## "ALL" or numeric value to specify the number of tasks run simultaneously at the backend.
layout="PE"                                   ## SE or PE.
SampleInfoFile=""                             ## Absolute path of a .csv file or leave with blank when there is no need to rename the sample.
SampleGrepPattern=""                          ## Perl-compatible regexps used for matching the SampleName under the work dir.


############# PrepareWorkDir Paramaters #############################################################
### raw_file_name=SampleIdPattern+SampleSufixPattern
### Example: R19051060_BKDL190818861-1a_1.fq.gz and R19051060_BKDL190818861-1a_2.fq.gz
### SampleIdPattern="R.*-1a"
### SampleSufixPattern="_BKDL.*_\d\.fq\.gz"
SampleIdPattern="R.*"                         ## This argument must be same pattern with the SampleID column in the SampleInfoFile.
SampleSufixPattern="_BKDL.*_\d\.fq\.gz"       ## SE must end with fq.gz or .fastq.gz. PE must end with _1.fastq.gz,_1.fq.gz,_R1.fastq.gz,_R1.fq.gz


############# preAlignmentQC Paramaters ########################################################################
### Fastp ###
trim_front1=10                 ## trimming how many bases in front for read1.6-10 bp for RNAseq and WGBS.
trim_tail1=0                   ## trimming how many bases in tail for read1.
trim_front2=10                 ## trimming how many bases in front for read2. Only valid when layout=PE.
trim_tail2=0                   ## trimming how many bases in tail for read2.
qualified_quality_phred=20     ## base quaility over this threshold value will be qualified.
unqualified_percent_limit=50   ## how many percents of bases are allowed to be unqualified. Otherwise the reads will be dropped.
read_cutting="--cut_right"     ## one or more options in the following: --cut_front --cut_tail --cut_right. Multiple selection should be seperated by spaces.
cut_window_size=4              ## the window size option shared by cut_front, cut_tail or cut_right. Range: 1~1000.
cut_mean_quality=20            ## the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36.
length_required=20             ## reads shorter than length_required will be discarded.

### FastqScreen ###
FastqScreen_config="/data/database/FastQ_Screen/FastQ_Screen_Genomes/fastq_screen.conf"

### SortmeRNA ###

SortmeRNA_Dir="/data/database/SortmeRNA"       ## SortmeRNA_ref: the dir containing the reference sequence.
SortmeRNA_Type="rRNA"                          ## SortmeRNA_ref: rRNA,Mt_tRNA,Mt_rRNA
SortmeRNA_Species="mouse"                      ## SortmeRNA_ref: human,mouse,machin,rhesus,fly
SortmeRNA_DataVersion="EnsemblGenes98"         ## SortmeRNA_ref: version of sortmerna fetched sequence 

SortmeRNA_ref=""                               ## Directly specify the path of the SortmeRNA_ref sequence file. 

############# Alignment Paramaters #############################################################################
Sequencing="rnaseq"                            ## rnaseq,wgs,bsseq
aligner="hisat2"                               ## bwa,bowtie,bowtie2,hisat2,tophat2,star,bismark_bowtie2,bismark_hisat2
iGenomes_Dir="/data/database/iGenomes"         ## The iGenomes dir
Species="mouse"                                ## human,mouse,machin,rhesus,fly
Database="Ensembl"                             ## Ensembl,NCBI,UCSC
Genome_build="GRCm38"                          ## The genome version under the dir GenomeDir/Species/Species_arr[Species]/Database.
Genome_name="genome.fa"                        ## genome.fa,genome_main.fa 


############# Quantification Paramaters ########################################################################
strandspecific=0                               ## 0(unstranded),1(stranded),2(reversely stranded)


############# DifferentialExpression Paramaters ################################################################
max_padj=0.05                                      ## Typically 0.05 or 0.01 or 0.001
min_fc=2                                           ## Typically 2
min_count=10                                       ## Minimum count required for at least n samples (n is the smallest group sample size).

group_compare="Hom-80S,WT-80S;Hom-Input,WT-Input;" ## Groups are seperated by comma(,). Different comparisons are seperated by semicolon(;). 
                                           
DGEs_multi_compare=1                               ## Whether to compare DGEs among different comparisons. 0(not to do),1(do).

EOF
echo -e "Task finished \nConfigFile: $1\n"
}


CheckConfigFile()
{
if  [[ ! -f $1 ]];then
  echo -e "Cannot find the ConfigFile:$ConfigFile !\n"
  exit 1
else
  echo -e ">>> Find the ConfigFile: $ConfigFile\n"
fi

}


CreateSampleInfoFile()
{
tmp=(`date +"%Y%m%d%H%M%S"`)
cat << EOF >temp_${tmp}.Sample_info.csv
SampleID(required),SampleName(required),Group(required)
R19051073,Hom1-80S,Hom-80S,
R19051077,Hom2-80S,Hom-80S,
R19051085,Hom3-80S,Hom-80S,
R19051061,WT1-80S,WT-80S,
R19051065,WT2-80S,WT-80S,
R19051069,WT3-80S,WT-80S,
R19051072,Hom1-Input,Hom-Input,
R19051076,Hom2-Input,Hom-Input,
R19051084,Hom3-Input,Hom-Input,
R19051060,WT1-Input,WT-Input,
R19051064,WT2-Input,WT-Input,
R19051068,WT3-Input,WT-Input,
EOF
echo -e "Task finished.\nSampleInfoFile: temp_${tmp}.Sample_info.csv\n"
}


PrepareWorkDir()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/0-PrepareWorkDir.sh
}


preAlignmentQC()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/1-preAlignmentQC.sh
}


Alignment()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/2-Alignment.sh
}


postAlignmentQC()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/3-postAlignmentQC.sh $shell_folder/dupRadar.R
}


Quantification()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/Quantification.sh $shell_folder/Quantification_featurecounts.R $shell_folder/Quantification_annotation.R
}

postQuantificationQC()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/postQuantificationQC.sh $shell_folder/postQuantificationQC.R
}

DifferentialExpression()
{
  shell_folder=$(dirname $(readlink -f "$0"))
  source $1
  source $shell_folder/LoadConfig.sh 
  source $shell_folder/DifferentialExpression.sh $shell_folder/DifferentialExpression.R
}

help()
{
cat << EOF
  Desc: Universal pipeline for next generation sequencing data.
  
  Author: ZhangHao

  Usage: 
  
    NGSpipe <MODE> [-c <Config_file>]
  
  MODE options:
    
    CreateConfigFile     
    
    CreateSampleInfoFile     
    
    PrepareWorkDir           
    
    preAlignmentQC           
    
    Alignment                
    
    postAlignmentQC          
    
    Quantification
    
    postQuantificationQC   
    
    DifferentialExpression   
    
  Other options:
  
    -c, --ConfigFile         Specify the path of ConfigFile. A templet config file 
                             will be created by <CreateConfigFile> MODE.
                                       
    -h, --help               Show this message.
    
    -v, --version            Show the version of NGSpipe.

EOF
}


version_info()
{
cat <<- EOF
############################
   NGSpipe vsersion: 0.1
############################

EOF
}


#################### Parsing the parameters ##################################################
echo  ""
getopt -T &>/dev/null;[ $? -ne 4 ] && { echo "not enhanced version\n";exit 1; }


parameters=`getopt --options c:hv --longoptions ConfigFile,help,version -n "$0" -- "$@"`
[ $? -ne 0 ] && { echo -e "Try '$0 --help' for more information.\n"; exit 1; }

eval set -- "$parameters" 
while true;do 
  case $1 in
    -c|--ConfigFile) ConfigFile=$2; shift 2;; 
    -h|--help) help; exit 0;; 
    -v|--version) version_info; exit 0;;
    --)
      shift
      if [[ $# == 0 ]];then
        echo -e "Please select a MODE. Try '$0 --help' for more information.\n"
        exit 1
      elif [[ $1 == "CreateConfigFile" ]];then
        if [[ $ConfigFile != "" ]];then
          CreateConfigFile $ConfigFile
        else
          maindir=(`pwd`)
          tmp=(`date +"%Y%m%d%H%M%S"`)
          ConfigFile=temp_${tmp}.config
          CreateConfigFile $ConfigFile
        fi
        exit 0
      elif [[ $1 == "CreateSampleInfoFile" ]];then
        CreateSampleInfoFile
        exit 0
      elif [[ $1 == "PrepareWorkDir" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in PrepareWorkDir MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        PrepareWorkDir $ConfigFile
        exit 0      
      elif [[ $1 == "preAlignmentQC" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in preAlignmentQC MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        preAlignmentQC $ConfigFile
        exit 0   
      elif [[ $1 == "Alignment" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in Alignment MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        Alignment $ConfigFile
        exit 0   
      elif [[ $1 == "postAlignmentQC" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in postAlignmentQC MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        postAlignmentQC $ConfigFile
        exit 0   
      elif [[ $1 == "Quantification" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in Quantification MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        Quantification $ConfigFile
        exit 0   
      elif [[ $1 == "postQuantificationQC" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in Quantification MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        postQuantificationQC $ConfigFile
        exit 0   
      elif [[ $1 == "DifferentialExpression" ]];then
        { echo "$parameters" | grep -E '\-\-ConfigFile|\-c'; } &>/dev/null
        [ $? -ne 0 ] && { echo -e "ERROR!\nOption -c|--ConfigFile needed in Quantification MODE!\nTry '$0 --help' for more information.\n"; exit 1; }
        CheckConfigFile $ConfigFile
        DifferentialExpression $ConfigFile
        exit 0   
      else
        echo -e "Invalid MODE: $1 \nTry '$0 --help' for more information.\n"
      fi
      break ;;
    -*) echo "error: no such option $1.\n"; exit 1;;
    *) echo "error: no such option $1.\n"; exit 1;;
   esac
done
